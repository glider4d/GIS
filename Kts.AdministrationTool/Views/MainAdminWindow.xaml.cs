using Kts.AdministrationTool.Data;
using Kts.AdministrationTool.Models;
using Kts.AdministrationTool.ViewModels;
using Kts.AdministrationTool.ViewModels.Classes;
using Kts.Gis.Data;
using Kts.Messaging;
using Kts.Settings;
using Kts.WpfUtilities;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Collections.Generic;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace Kts.AdministrationTool.Views
{
    
    /// <summary>
    /// Interaction logic for MainAdminWindow.xaml
    /// </summary>
    public partial class MainAdminWindow : Window
    {
        private IDataService m_dataService;
        private IMessageService m_messageService;
        private ISettingService m_settingService;
        private SqlAdminAccessService m_adminDataService;

        private LoginTableViewModel m_loginTab;
        private paramertersTypeViewModel m_paramTab;
        private SessionsViewModel m_sessionTab;

        

        public RelayCommand changeType
        {
            get;
        }

        public RelayCommand changeList
        {
            get;
        }

        public RelayCommand cellDoubleClick
        {
            get;
        }


        public EventHandler<ComboBoxSelectEvent> changeEvent;

        public MainAdminWindow(string loginName, IDataService dataService, IMessageService messageService, ISettingService settingService,SqlAdminAccessService adminDataService)
        {

            




            InitializeComponent();

            userGrid.AutoGeneratingColumn += AutoGeneratedColumn;
            

            Application.Current.MainWindow = this;
            m_dataService = dataService;
            m_messageService = messageService;
            m_settingService = settingService;
            m_adminDataService = adminDataService;
            //_someDataGridView.SelectedCells[0].RowIndex


            m_sessionTab = new SessionsViewModel(m_adminDataService);

            m_loginTab = new LoginTableViewModel(m_adminDataService, userGrid, DataContext);
            
            m_paramTab = new paramertersTypeViewModel(m_adminDataService, paramType, parametersGrid, popup1, layoutRoot, comboBoxType);
            

            layoutRoot.MouseMove += m_paramTab.OnMouseMove;
            
            paramType.MouseDown += m_paramTab.OnMouseLeftButtonDown;
            layoutRoot.MouseLeftButtonUp += m_paramTab.OnMouseLeftButtonUp;
            this.MouseLeftButtonUp += m_paramTab.OnMouseLeftButtonUp;

            paramType.BeginningEdit += m_paramTab.OnBeginEdit;
            paramType.CellEditEnding += m_paramTab.OnEndEdit;
            

            /*
             BeginningEdit="OnBeginEdit"
                            CellEditEnding="OnEndEdit"
                            PreviewMouseLeftButtonDown="OnMouseLeftButtonDown"
             */



            /*
            paramType.DragOver += dataGridView1_DragOver;
            paramType.Drop += dataGridView1_DragDrop;*/

            this.changeEvent += m_paramTab.selectComboBox;

            this.changeList = new RelayCommand(m_loginTab.saveButtonClick);
            this.changeType = new RelayCommand(m_paramTab.saveButtonClick);
            this.cellDoubleClick = new RelayCommand(clickOnRegion);

            //this.changeList = new RelayCommand(testRelayCommand);

            this.DataContext = this;
            this.Loaded += Window_Loaded;


            this.comboBoxType.SelectionChanged += selectionChanged;

            //this.mainViewModel = new MainViewModel(loginName, accessService.RoleName, accessService, dataService, this.mapBindingService, messageService, reportService, settingService, substrateService);
        }
        private void dataGridView1_MouseMove(object sender, MouseEventArgs e)
        {
        }

        private void dataGridView1_MouseDown(object sender, MouseEventArgs e)
        {
        }

        private void dataGridView1_DragOver(object sender, DragEventArgs e)
        { 
        }

        private void dataGridView1_DragDrop(object sender, DragEventArgs e)
        { 
        }

        private void clickOnRegion( )
        {
            //MessageBox.Show("clickOnRegion");
        }

        private void selectionChanged(object sender, SelectionChangedEventArgs e)
        {

            //(KeyValuePair<int,string>)comboBoxType.SelectedItem;

            //this.LongTimeTaskRequested?.Invoke(this, new LongTimeTaskRequestedEventArgs(null));

            


            if (comboBoxType.SelectedItem is KeyValuePair<int, string>)
            {
                KeyValuePair<int, string> item = (KeyValuePair<int, string>)comboBoxType.SelectedItem;
                this.changeEvent?.Invoke(this, new ComboBoxSelectEvent(item));
                //MessageBox.Show("key = " + test.Key + " value = " + test.Value);
                //EventHandler<ComboBoxSelectEvent> = 
            }
            

            

            

        }



        void AutoGeneratedColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
        }

        private int m_tabPreviousIndex = (-1);

        private void TabControl_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (parametersType.IsSelected && m_tabPreviousIndex != 2)
            {


                m_tabPreviousIndex = 2;
                DataContext = m_paramTab;
                m_paramTab.isVisible();
            }
            if (sessions.IsSelected && m_tabPreviousIndex != 0)
            {
                m_tabPreviousIndex = 0;
                DataContext = m_sessionTab;
                m_sessionTab.isVisible();

            }

            if (users.IsSelected && m_tabPreviousIndex != 1)
            {
                m_tabPreviousIndex = 1;
                DataContext = m_loginTab;

                m_loginTab.isVisible();
            }
        }

        private void OnBeginEdit(object sender, DataGridBeginningEditEventArgs e)
        {

        }

        private void OnEndEdit(object sender, DataGridCellEditEndingEventArgs e)
        {

        }

        private void OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {

        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
        }
    }
}
